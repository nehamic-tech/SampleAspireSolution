name: Build & Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to (dev, prod, etc.)"
        required: true
        default: "dev"
      force_rebuild:
        description: "Force rebuild and push Docker image"
        required: false
        default: "false"

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [Service1]
    env:
      CODE_ROOT: src
      SOLUTION_NAME: SampleAspireSolution

    steps:
      - name: ‚ôªÔ∏è Cache terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: terraform-${{ runner.os }}-

      - name: üßæ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch all history for accurate diff detection

      - name: üîß Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: ‚ú® Generate lowercase service name
        id: name
        run: echo "lower=$(echo '${{ matrix.service }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: üè∑Ô∏è Read version from service.yaml
        id: config
        run: |
          IMAGE_TAG=$(yq '.service.version // "latest"' ${{ env.CODE_ROOT }}/${{ matrix.service }}/.iac/service.yaml)
          echo "version=$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: üïµÔ∏è Detect code changes or force rebuild
        id: changes
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          elif git diff --quiet HEAD^ HEAD -- ${{ env.CODE_ROOT }}; then
            echo "No changes detected"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: üì¶ Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_NAME }}.sln

      - name: üõ†Ô∏è Build code
        if: steps.changes.outputs.changed == 'true'
        run: |
          dotnet build ${{ env.CODE_ROOT }}/${{ matrix.service }}/${{ matrix.service }}.csproj --no-restore --configuration Release

      - name: ‚è≠Ô∏è Skip .NET build (no changes)
        if: steps.changes.outputs.changed == 'false'
        run: echo "No changes in code. Skipping .NET build."

      - name: üîê Log in to ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üèóÔ∏è Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "${{ steps.name.outputs.lower }}" || \
          aws ecr create-repository --repository-name "${{ steps.name.outputs.lower }}"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üê≥ Build Docker image
        if: steps.changes.outputs.changed == 'true'
        run: |
          IMAGE_NAME="${{ secrets.ECR_REGISTRY }}/${{ steps.name.outputs.lower }}"
          IMAGE_TAG="${{ steps.config.outputs.version }}"
          docker build -t $IMAGE_NAME:$IMAGE_TAG -f ${{ env.CODE_ROOT }}/${{ matrix.service }}/Dockerfile .

      - name: ‚è≠Ô∏è Skip Docker build (no changes)
        if: steps.changes.outputs.changed == 'false'
        run: echo "No changes in code. Skipping Docker build."

      - name: üöÄ Push Docker image to ECR
        if: steps.changes.outputs.changed == 'true'
        run: |
          IMAGE_NAME="${{ secrets.ECR_REGISTRY }}/${{ steps.name.outputs.lower }}"
          IMAGE_TAG="${{ steps.config.outputs.version }}"
          docker push $IMAGE_NAME:$IMAGE_TAG

      - name: üöÄ Deploy to ECS
        uses: ./.github/actions/ecr-deploy
        with:
          environment: ${{ github.event.inputs.environment }}
          service_path: ${{ env.CODE_ROOT }}/${{ matrix.service }}
          image_uri: ${{ secrets.ECR_REGISTRY }}/${{ steps.name.outputs.lower }}:${{ steps.config.outputs.version }}
        env:
          ACTION: apply
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          GITHUB_TOKEN: ${{ secrets.GH_PLATFORM_TOKEN }}
